syntax = "proto3";
// Текущий пакет - указывает пространство имен для сервиса и сообщений.
package contest;

// Настройки для генерации GO кода. Используется при генерации файлов на GO
option go_package = "github.com/erkkipm/contest_proto/gen/go;contestV1";


import "google/protobuf/timestamp.proto";

// Сервис для входа и регистрации
service Contest{
  // ==== ЗАЯВКИ ====
  // CONTEST = ADD
  rpc AddContest (AddContestRequest) returns (AddContestResponse);
  // CONTEST = GET = ByID
  rpc GetContestByID (GetContestByIDRequest) returns (GetContestByIDResponse);
  // CONTEST = GET = ByPerson
  rpc GetContestsByPersonID (GetContestByPersonIDRequest) returns (GetContestsByPersonIDResponse);
  // CONTEST = GET = With Empty Category \\ с пустой категорией
  rpc GetContestWithEmptyCategory(GetContestWithEmptyCategoryRequest) returns (GetContestWithEmptyCategoryResponse);
  // CONTESTS = LIST = By Category \\ с категорией
  rpc ListContestsByCategory(ListContestsByCategoryRequest) returns (ListContestsByCategoryResponse);
  // CONTESTS = LIST = By Region
  rpc ListContestsByRegion (ListContestsByRegionRequest) returns (ListContestsByRegionResponse);
  //  CONTESTS = UPDATE
  rpc UpdateContest (UpdateContestRequest) returns (UpdateContestResponse);

  // ==== ПЕРСОНА ====
  // PERSON = ADD
  rpc AddPerson (AddPersonRequest) returns (AddPersonResponse);
  //  PERSON = GET = ByID //  Получение данных персоны по ID
  rpc GetPersonByID (GetPersonByIDRequest) returns (GetPersonByIDResponse);
  //  PERSON = LIST
  rpc ListPersons (ListPersonsRequest) returns (ListPersonsResponse);
  //  PERSON = LIST = ByRegion || Получение всех персон в регионе
  rpc ListPersonsByRegion (ListPersonsByRegionRequest) returns (ListPersonsByRegionResponse);
  //  PERSON = UPDATE
  rpc UpdatePerson (UpdatePersonRequest) returns (UpdatePersonResponse);

  //  ==== АРТИСТ ====
  // ДОБАВИТЬ
  rpc AddArtist (AddArtistRequest) returns (AddArtistResponse);
  //  СПИСОК
  rpc ListArtists (ListArtistsRequest) returns (ListArtistsResponse);
  //  ПОЛУЧИТЬ
  rpc GetArtistByID (GetArtistByIDRequest) returns (GetArtistByIDResponse);

  // ==== ПЕСНЯ =====
  // ДОБАВИТЬ
  rpc AddSong (AddSongRequest) returns (AddSongResponse);
  //  СПИСОК
  rpc ListSongs (ListSongsRequest) returns (ListSongsResponse);
  //  ПОЛУЧИТЬ
  rpc GetSongByID (GetSongByIDRequest) returns (GetSongByIDResponse);

  // ===== ЛИТЕРАТУРНОЕ ПРОИЗВЕДЕНИЕ ====
  // ДОБАВИТЬ
  rpc AddLitWork (AddLitWorkRequest) returns (AddLitWorkResponse);
  //  СПИСОК
  rpc ListLitWorks (ListLitWorksRequest) returns (ListLitWorksResponse);
  //  ПОЛУЧИТЬ
  rpc GetLitWorkByID (GetLitWorkByIDRequest) returns (GetLitWorkByIDResponse);
}

// ==========
// ==========
// ==========

// FullContent ... полная заявка
message FullContent {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string competition_id = 4;
  Person author = 5;
  RateBook rate_book = 6;
  repeated Song song = 7;
  repeated Artist artist_song_own = 8;
  repeated Rate rate_book_song_own = 9;
  repeated LitWork lit_work = 10;
  repeated Artist artist_song_remake = 11;
  repeated Rate rate_book_song_remake = 12;
  int32 sort = 13;
  int32 status = 14;
  bool active = 15;
  string app_id = 16;
  string owner_id = 17;
  google.protobuf.Timestamp created = 18;
  google.protobuf.Timestamp updated = 19;
  google.protobuf.Timestamp expires = 20;
}
// Person
message Person {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  //  string login = 7;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}
// Song
message Song {
  string id = 1;
  repeated string artist = 2;
  string title = 3;
  repeated string author_lyrics = 4;
  repeated string author_music = 5;
  repeated string arranger = 6;
  repeated string audio = 7;
  repeated string clip = 8;
  repeated string video = 9;
  repeated string pts = 10;
  string release = 11;
  string lyrics = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
// Artist
message Artist {
  string id = 1;
  string title = 2;
  string short_title = 3;
  repeated string type = 4;
  string city = 5;
  string region = 6;
  string country = 7;
  string site = 8;
  repeated string photo = 9;
  string bio = 10;
  repeated string socmedia = 11;
  repeated string release = 12;
  repeated string team = 13;
  bool active = 14;
  string owner_id = 15;
  google.protobuf.Timestamp created = 16;
  google.protobuf.Timestamp updated = 17;
  google.protobuf.Timestamp expires = 18;
}
// Rate
message Rate {
  string id = 1;
  string rate_book_id = 2;
  int32 rate = 3;
  string jury = 5;
  bool active = 6;
  string app_id = 15;
  string owner_id = 16;
  google.protobuf.Timestamp created = 17;
  google.protobuf.Timestamp updated = 18;
  google.protobuf.Timestamp expires = 19;
}
// RateBook
message RateBook {
  string id = 1;
  string content_app = 2;
  string song_id = 3;
  string lit_work_id = 4;
  int32 level = 5;
  bool active = 6;
  string app_id = 7;
  string owner_id = 8;
  google.protobuf.Timestamp created = 9;
  google.protobuf.Timestamp updated = 10;
  google.protobuf.Timestamp expires = 11;
}
// Litwork - Литературное произведение
message LitWork {
  string id = 1;
  string title = 2;
  repeated string authorID = 3;
  repeated string audio = 4;
  repeated string clip = 5;
  repeated string video = 6;
  string release = 7;
  string lyrics = 8;
  bool active = 9;
  string owner_id = 10;
  google.protobuf.Timestamp created = 11;
  google.protobuf.Timestamp updated = 12;
  google.protobuf.Timestamp expires = 13;
}

// ==========
// ==========
// ==========

// CONTEST

// CONTEST = ADD
message AddContestRequest {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
message AddContestResponse {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
// CONTEST = GET = ByID
message GetContestByIDRequest {
  string id = 1;
}
message GetContestByIDResponse {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
// CONTEST = GET = ByPersonID
message GetContestByPersonIDRequest {
  string person_id = 1;
}
message GetContestsByPersonIDResponse {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
// CONTEST = GET = With Empty Category
message GetContestWithEmptyCategoryRequest {
  string competition_id = 1;
}
message GetContestWithEmptyCategoryResponse {
  FullContent contest = 1;
}
// CONTESTS = LIST = By Category
message ListContestsByCategoryRequest {
  string category = 1;
  string competition = 2;
}
message ListContestsByCategoryResponse {
  repeated FullContent contests = 1;
}
// CONTESTS = LIST = By Region
message ListContestsByRegionRequest {
  string region = 1;
  string competition = 2;
}
message ListContestsByRegionResponse {
  repeated FullContent contests = 1;
}
// CONTESTS = UPDATE
message UpdateContestRequest {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  string category = 13;
  bool active = 14;
  string owner_id = 15;
  google.protobuf.Timestamp created = 16;
  google.protobuf.Timestamp updated = 17;
  google.protobuf.Timestamp expires = 18;
}
message UpdateContestResponse {
  string id = 1;
  google.protobuf.Timestamp date = 2;
  string competition = 3;
  string author_id = 5;
  string artist_id = 6;
  string song_own_id = 7;
  string song_remake_id = 8;
  string lit_work_id = 9;
  int32 sort = 10;
  repeated string rate_book = 11;
  int32 status = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}

// PERSON

// PERSON = ADD
message AddPersonRequest {
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}
message AddPersonResponse {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}
// PERSON = GET = ByID
message GetPersonByIDRequest {
  string id = 1;
}
message GetPersonByIDResponse {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  //  string login = 7;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}
// PERSONS = LIST
message ListPersonsRequest {
  // Фильтры если нужны
}
message ListPersonsResponse {
  repeated Person persons = 1;
}
// PERSONS = LIST = ByRegion
message ListPersonsByRegionRequest {
  string region = 1;
}
message ListPersonsByRegionResponse {
  repeated Person persons = 1;
}
// PERSON = UPDATE
message UpdatePersonRequest {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}
message UpdatePersonResponse {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string middle_name = 4;
  repeated string phone = 5;
  repeated string email = 6;
  //  string login = 7;
  string bio = 7;
  string city = 8;
  string region = 9;
  string country = 10;
  bool active = 11;
  string owner_id = 12;
  google.protobuf.Timestamp created = 13;
  google.protobuf.Timestamp updated = 14;
  google.protobuf.Timestamp expires = 15;
}

// ARTIST

// ARTIST = ADD
message AddArtistRequest {
  string title = 2;
  string short_title = 3;
  repeated string type = 4;
  string city = 5;
  string region = 6;
  string country = 7;
  string site = 8;
  repeated string photo = 9;
  string bio = 10;
  repeated string socmedia = 11;
  repeated string release = 12;
  repeated string team = 13;
  bool active = 14;
  string owner_id = 15;
  google.protobuf.Timestamp created = 16;
  google.protobuf.Timestamp updated = 17;
  google.protobuf.Timestamp expires = 18;
}
message AddArtistResponse {
  string id = 1;
  string title = 2;
  string short_title = 3;
  repeated string type = 4;
  string city = 5;
  string region = 6;
  string country = 7;
  string site = 8;
  repeated string photo = 9;
  string bio = 10;
  repeated string socmedia = 11;
  repeated string release = 12;
  repeated string team = 13;
  bool active = 14;
  string owner_id = 15;
  google.protobuf.Timestamp created = 16;
  google.protobuf.Timestamp updated = 17;
  google.protobuf.Timestamp expires = 18;
}
// ARTISTS = LIST
message ListArtistsRequest {
  // Можно добавить фильтры при необходимости, например region, app_id и т.д.
}
message ListArtistsResponse {
  repeated AddArtistResponse artists = 1;
}
// ARTIST = GET = ByID
message GetArtistByIDRequest {
  string id = 1;
}
message GetArtistByIDResponse {
  string id = 1;
  string title = 2;
  string short_title = 3;
  repeated string type = 4;
  string city = 5;
  string region = 6;
  string country = 7;
  string site = 8;
  repeated string photo = 9;
  string bio = 10;
  repeated string socmedia = 11;
  repeated string release = 12;
  repeated string team = 13;
  bool active = 14;
  string owner_id = 15;
  google.protobuf.Timestamp created = 16;
  google.protobuf.Timestamp updated = 17;
  google.protobuf.Timestamp expires = 18;
}


// SONG

// SONG = ADD
message AddSongRequest {
  repeated string artist = 2;
  string title = 3;
  repeated string author_lyrics = 4;
  repeated string author_music = 5;
  repeated string arranger = 6;
  repeated string audio = 7;
  repeated string clip = 8;
  repeated string video = 9;
  repeated string pts = 10;
  string release = 11;
  string lyrics = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
message AddSongResponse {
  string id = 1;
  repeated string artist = 2;
  string title = 3;
  repeated string author_lyrics = 4;
  repeated string author_music = 5;
  repeated string arranger = 6;
  repeated string audio = 7;
  repeated string clip = 8;
  repeated string video = 9;
  repeated string pts = 10;
  string release = 11;
  string lyrics = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}
// SONGS = LIST
message ListSongsRequest {
  // Можно добавить фильтры
}
message ListSongsResponse {
  repeated AddSongResponse songs = 1;
}
// SONG = GET = ByID
message GetSongByIDRequest {
  string id = 1;
}
message GetSongByIDResponse {
  string id = 1;
  repeated string artist = 2;
  string title = 3;
  repeated string author_lyrics = 4;
  repeated string author_music = 5;
  repeated string arranger = 6;
  repeated string audio = 7;
  repeated string clip = 8;
  repeated string video = 9;
  repeated string pts = 10;
  string release = 11;
  string lyrics = 12;
  bool active = 13;
  string owner_id = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  google.protobuf.Timestamp expires = 17;
}

// LITWORK

// LITWORK = ADD
message AddLitWorkRequest {
  string title = 2;
  repeated string authorID = 3;
  repeated string audio = 4;
  repeated string clip = 5;
  repeated string video = 6;
  string release = 7;
  string lyrics = 8;
  bool active = 9;
  string owner_id = 10;
  google.protobuf.Timestamp created = 11;
  google.protobuf.Timestamp updated = 12;
  google.protobuf.Timestamp expires = 13;
}
message AddLitWorkResponse {
  string id = 1;
  string title = 2;
  repeated string authorID = 3;
  repeated string audio = 4;
  repeated string clip = 5;
  repeated string video = 6;
  string release = 7;
  string lyrics = 8;
  bool active = 9;
  string owner_id = 10;
  google.protobuf.Timestamp created = 11;
  google.protobuf.Timestamp updated = 12;
  google.protobuf.Timestamp expires = 13;
}
// LITWORKS = LIST
message ListLitWorksRequest {
  // Можно добавить фильтры
}
message ListLitWorksResponse {
  repeated AddLitWorkResponse lit_works = 1;
}
// LITWORK = GET = ByID
message GetLitWorkByIDRequest {
  string id = 1;
}
message GetLitWorkByIDResponse {
  string id = 1;
  string title = 2;
  repeated string authorID = 3;
  repeated string audio = 4;
  repeated string clip = 5;
  repeated string video = 6;
  string release = 7;
  string lyrics = 8;
  bool active = 9;
  string owner_id = 10;
  google.protobuf.Timestamp created = 11;
  google.protobuf.Timestamp updated = 12;
  google.protobuf.Timestamp expires = 13;
}